ssr = server side rendered

app> layout.js ==> if you write something into layout.js, it appears into browser dom.

easy to make routing => create folder in app as you like. e.g., services, about, etc.

<Link href="/about">About</Link> ==> Next.js provide the Link tag for automatic render to e.g. /about as About Page.

if you make nexted routing in next.js ==> you will create new folder and create page.js into new folder. services > web-development > html > etc. It is neccessary for href attribute of Link tag you have to write full path of routing e.g., "/services/web-development/html".

props is simple object. props have two Promise that are params and searchParams. params and searchParams is default value is empty {}.

If you put localhost:3000/?name=Janak&age=33&address=Kanchanpur, you will get searchParams value {name: "Janak", age= 33, address= "Kanchanpur"}

if you create [blog] folder into blogs folder and give localhost:3000/blogs/1, you will get params: {blog: "1"}.It's neccessary make async function and await params for getting parmas value. [blog] called slag.

blogs is main route, after it you have [blog] that is dynamic route. In the [blog] dynamic route you can create another normal route comments, aslo you can create another dynamic route into comments like [comments]. You can do so on continuously. And you can get all params facilities into [comment] route. if you give localhost://3000/blogs/mobile/comments/1 after that you do console.log(await params), you will get {blog: "mobile", comment: "1"}. blogs and comments is normal route and [blog] and [comment] is dynamic route.

Catch All Route
----------------
At first create new route [files] ==> This is normal route
Inside the [files] you create [[...file]] ==> This is optional Dynamic Route.
Inside the [[..file]]'s page.js, if you console("filePath: ", await params), you will get: localhost:3000/files -> filePath: {} or localhost:3000/files/a/b/c/d/e/f -> filePath: {file: ['a', 'b', 'c', 'd', 'e', 'f']}.
You can not directly creat this type [[...file]] route on app directory because it means app's page.js file.
One try case: at first create [[...temp]] on app directory and delete app's page.js file. Its work instead of app's page.js file.
After look at you will undo the app's page.js file. Ok?

Building Reusable layout
------------------------
Delete unneccessary default code of app's layout.js. After the delete add header and footer elements. -> It works for all route footer and header.
You can make layout.js in every directory such as we add in services's directory. Inside the services's layout.js. In the layout.js file we can add header and footer. -> It gives header and footer in all services route.

MetaData
--------
In app's layout.js file you should establish metadata. metadata have a lot of features e.g., title, description, url, siteName, images, videos, audio, local, type, etc.
API Reference -> generateMetadata gives features about route {params} object and you should apply in generateMetadata as return title: `` string.
If we make it dynamic we should apply in title emplete: " %s | TitleName ", default: " TitleName "
In simple router we should apply absolute title name. -> title: {absolute: "Absolute Name"} -> It replaces the app's layout.js original title name.
Description makes our website SEO. We can see in head tag about described words.

Not Found Page
--------------
app > not-found.js -> it works for all routes.
dynamic nexted route > [blogs] -> not-found.js -> it works for only blogs route.
notfound() fn is also nevigate into default page not found page.
add "use client" feature in not-found after that usePathename() import from "next/navigation" then you will give path name route name in this function because no-found route does not give {params} feature.

Route Group
-----------
In app we can create seperate route group like this (application), (auth), (marketing).
Its easy to make own layout.js and all in all route in the group route carry the group route's layout design.

Private Folders
---------------
If you want creat component or private directory into the app directory you should directory name starts from _, for example app > _component. Otherwise outside of app directory you also should create private folder or directory without any rules, for example inside the home directory > component.
Inside the private directory you should apply any type of name of every file. Its not neccessary page.js or layout.js or route.js.

different between vite and next app
-----------------------------------
vite render client side server
next is rendering time server side render after render client side server
vite files after build give us one index file, one css file and one js file of whole file.
next file after build give us various html file of each routes and various files of css, js, etc.
Similarly loading the next.js code into browser we found in network tab:
a. localhost
b. webpack##########
c. css#########
d. js###########
e. page#########
f. blogs?_rsc=59c3v
g. about?_rsc=59c3v
h. services?_rsc=59c3v

Static vs Dynamic rendering
---------------------------
I add inside add anurag sing procodrr code
In app > about, blogs, services routes
In blogs > [blog]
The blogs route is simple route, inside bloges > page.js file:
 a. Simple nav
 b. Blog 1, Blog 2 and Blog 3
In [blog] > this is dynamic route:
 a. We need generateStaticParams f() for generating static site rendering.
  1. If we have few blog type files then we should creat [] and apply {}'s 
  2. If we have a lot of blogs than we need json data, so we should fetch json data and apply map function for create the bunch of {}'s inside the array
  3. both case we have to return [] from the f().
 b. For building the created code we should cmd in terminal: npm run build.
 c. After build, we can apply cmd in terminal: npm start
 d. In the brower network pannel we have bunch of files, as static and dynamic types.

 










